// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}


/*
This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
It will generate several classes such as:
.m-r-10 which gives margin-right 10 pixels.
.m-r-15 gives MARGIN to the RIGHT 15 pixels.
.m-t-15 gives MARGIN to the TOP 15 pixels and so on.
.p-b-5 gives PADDING to the BOTTOM of 5 pixels
.p-l-40 gives PADDING to the LEFT of 40 pixels
The first letter is "m" or "p" for MARGIN or PADDING
Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
Third letter is the number of spacing in pixels. Adjust the amounts generated by editing the $spaceamounts variable below.
*/

$spaceamounts: (1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 25, 30, 35, 40, 45, 50, 75, 100); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone

@each $space in $spaceamounts {
  @each $side in $sides {
    .m-#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: $space * 1px !important;
    }
  
    .p-#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: $space * 1px !important;
    }

    .-m-#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: -$space * 1px !important;
    }
    
    .-p-#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: -$space * 1px !important;
    }
  }

  .m-#{$space} {
    margin: $space * 1px !important;
  }
  
  .p-#{$space} {
    padding: $space * 1px !important;
  }
}

/*
	For Width and heights
*/

$sizes: (1, 2, 3, 4, 5, 6, 8, 10, 12, 16, 24, 32, 48, 64);

@each $size in $sizes {
  .w-#{$size} {
    width:($size/4) * 1rem !important;
  }
  
  .h-#{$size} {
    height:($size/4) * 1rem !important;
  }
}

.w-1\/2 {
	width: 50% !important;
}

.w-1\/3 {
	width: 33.3% !important;
}

.w-2\/3 {
	width: 66.66667% !important;
}

.w-1\/4 {
	width: 25% !important;
}

.w-3\/4 {
	width: 75% !important;
}

.w-1\/5 {
	width: 20% !important;
}

.w-2\/5 {
	width: 40% !important;
}

.w-3\/5 {
	width: 60% !important;
}

.w-4\/5 {
	width: 80% !important;
}

.w-1\/6 {
	width: 16.66667% !important;
}

.w-5\/6 {
	width: 83.33333% !important;
}

.w-auto {
	width: auto !important;
}

.mx-auto {
  margin: 0 auto !important;
}

/* 
	For borders
*/

$borders: (0, 1, 2, 4, 8); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone

@mixin border($direction, $width, $style, $color) {
  border-#{$direction}: $width $style $color;
}

@each $border in $borders {
  @each $side in $sides {
    .border-#{str-slice($side, 0, 1)}-#{$border} {
      border-#{$side}: $border * 1px solid !important;
    }
  }

  .border-#{$border} {
    border: $border * 1px solid !important;
  }
}


/* 
For :before and :after, just @include it 
*/
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

/* 
For input-placeholders, e.g:

textarea {  
    @include input-placeholder {
        color: $grey;
    }
}

*/
@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

/* 
For MediaQueries, usage:

.site-header {
    padding: 2rem;
    font-size: 1.8rem;
    @include mq('tablet-wide') {
        padding-top: 4rem;
        font-size: 2.4rem;
    }
}

*/
$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}


/* Text styles */
@mixin Text-Style-2 {
  font-family: $font-default;
  font-size: 8px;
  letter-spacing: 0px;
  text-align: center;
  color: $greyish-brown;
}

@mixin Text-Style {
  font-family: Lato;
  font-size: 7px;
  font-weight: 300;
  letter-spacing: -0.1px;
  text-align: left;
  color: $greyish-brown;
}